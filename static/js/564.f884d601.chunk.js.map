{"version":3,"file":"static/js/564.f884d601.chunk.js","mappings":"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","sources":["webpack://phonebook/./src/pages/ContactsPage/Contacts.module.css?4a20","webpack://phonebook/./src/components/Card/Card.module.css?4f06","components/Card/Card.jsx","webpack://phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://phonebook/./src/components/NotFound/NotFound.module.css?3aa0","components/NotFound/NotFound.jsx","webpack://phonebook/./src/components/UserForm/UserForm.module.css?24f4","components/UserForm/UserForm.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__oHtMx\",\"filterInput\":\"Contacts_filterInput__bAOM6\"};","// extracted by mini-css-extract-plugin\nexport default {\"contacts__item\":\"Card_contacts__item__9DfVu\",\"user__number\":\"Card_user__number__2vsct\",\"iconMoon\":\"Card_iconMoon__PIfaO\",\"contacts__btn\":\"Card_contacts__btn__Zo1Nf\"};","import CSS from './Card.module.css';\nimport { ImCross, ImPhone } from 'react-icons/im';\nimport PropTypes from 'prop-types';\n\nconst Card = ({ filteredContacts, handleDeleteContact }) => {\n  return filteredContacts.map(({ name, id, number }) => (\n    <li className={CSS.contacts__item} key={name} id={id}>\n      <p>name: {name}</p>\n      <p className={CSS.user__number}>\n        <ImPhone className={CSS.iconMoon} />\n        {number}\n        <ImCross\n          type=\"button\"\n          className={CSS.contacts__btn}\n          onClick={() => handleDeleteContact(id)}\n        ></ImCross>\n      </p>\n    </li>\n  ));\n};\n\nCard.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\",\"userForm__label\":\"Filter_userForm__label__CI043\"};","import CSS from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addFilter, getFilterValue } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const formState = useSelector(getFilterValue);\n\n  return (\n    <>\n      <div className={CSS.filter}>\n        <label htmlFor=\"filter\" className={CSS.userForm__label}>\n          Find contacts by name\n        </label>\n        <input\n          type=\"text\"\n          id=\"filter\"\n          placeholder=\"Search...\"\n          className={CSS.filterInput}\n          onChange={e => dispatch(addFilter(e.target.value))}\n          value={formState}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"picture\":\"NotFound_picture__FhKXF\",\"imageNotFound\":\"NotFound_imageNotFound__TOh5Y\"};","import emptyImg from 'images/noImage.webp';\nimport CSS from './NotFound.module.css';\n\nconst NotFound = () => (\n  <picture className={CSS.picture}>\n    <img\n      className={CSS.imageNotFound}\n      src={emptyImg}\n      alt=\"Not found\"\n      width={250}\n      height={250}\n    />\n    <b>\n      Your phonebook is empty!\n    </b>\n  </picture>\n);\n\nexport default NotFound;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UserForm_container__Wfyic\",\"userForm\":\"UserForm_userForm__bdjR0\",\"userForm__label\":\"UserForm_userForm__label__ClhV9\",\"userForm__input\":\"UserForm_userForm__input__be5v6\",\"userForm__btn\":\"UserForm_userForm__btn__HviwO\",\"warningLink\":\"UserForm_warningLink__CUvM0\",\"greeting\":\"UserForm_greeting__BCyD7\"};","import CSS from './UserForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'services/operations';\nimport { selectContactsList } from 'redux/filterSlice';\nimport { selectToken } from 'redux/contactsSlice';\nimport { Notify } from 'notiflix';\n\nconst UserForm = () => {\n  const contactList = useSelector(selectContactsList);\n\n  const token = useSelector(selectToken);\n  const dispatch = useDispatch();\n\n  //state for adding contact values\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleStateChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleAddUser = e => {\n    e.preventDefault();\n\n    if (!token) {\n      Notify.warning('Please register first', {\n        clickToClose: true,\n      });\n      setName('');\n      setNumber('');\n      return;\n    }\n\n    if (\n      contactList.some(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() ||\n          contact.number === number\n      )\n    ) {\n      Notify.warning(`${name} is already in contacts`, { clickToClose: true });\n      setName('');\n      setNumber('');\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    Notify.success(`${name} has been added!`, { clickToClose: true });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={CSS.container}>\n      <h2>Add Contact</h2>\n\n      <form\n        action=\"\"\n        autoComplete=\"off\"\n        className={CSS.userForm}\n        onSubmit={handleAddUser}\n      >\n        <label htmlFor=\"formNameInput\" className={CSS.userForm__label}>\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+([ -][a-zA-Zа-яА-Я]+)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id=\"formNameInput\"\n          className={CSS.userForm__input}\n          value={name}\n          onChange={handleStateChange}\n        />\n\n        <label htmlFor=\"formNumberInput\" className={CSS.userForm__label}>\n          Number\n        </label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"^(\\+?\\d{0,4}[\\s-]?)?\\(?\\d{1,3}\\)?[\\s-]?\\d{1,4}[\\s-]?\\d{1,4}[\\s-]?\\d{1,9}$\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id=\"formNumberInput\"\n          className={CSS.userForm__input}\n          value={number}\n          onChange={handleStateChange}\n        />\n\n        <button type=\"submit\" className={CSS.userForm__btn}>\n          Add Contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default UserForm;\n","import CSS from './Contacts.module.css';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from 'services/operations';\nimport { getLoadingValue } from 'redux/contactsSlice';\nimport { getFilterValue, selectContactsList } from 'redux/filterSlice';\nimport Card from 'components/Card/Card';\nimport Filter from 'components/Filter/Filter';\nimport NotFound from 'components/NotFound/NotFound';\nimport { Confirm } from 'notiflix/build/notiflix-confirm-aio';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport UserForm from 'components/UserForm/UserForm';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(selectContactsList);\n  const isLoading = useSelector(getLoadingValue);\n  const filterValue = useSelector(getFilterValue);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contactsList.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n\n  const handleDeleteContact = id => {\n    Confirm.show(\n      'Deleteing Confirm',\n      'This contact will be deleted!',\n      'Yes',\n      'No',\n      () => {\n        dispatch(deleteContact(id));\n        Notify.success(`The contact has been deleted!`, { clickToClose: true });\n      }\n    );\n  };\n\n  const hasContacts = contactsList.length > 0;\n\n  return (\n    <>\n      <UserForm />\n      <Filter />\n\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        hasContacts && (\n          <ul className={CSS.contacts}>\n            <Card\n              handleDeleteContact={handleDeleteContact}\n              filteredContacts={filteredContacts}\n            />\n          </ul>\n        )\n      )}\n\n      {!isLoading && !hasContacts && <NotFound />}\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["_ref","filteredContacts","handleDeleteContact","map","_ref2","name","id","number","_jsxs","className","CSS","children","_jsx","ImPhone","ImCross","type","onClick","dispatch","useDispatch","formState","useSelector","getFilterValue","_Fragment","filter","htmlFor","userForm__label","placeholder","filterInput","onChange","e","addFilter","target","value","src","emptyImg","alt","width","height","contactList","selectContactsList","token","selectToken","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","handleStateChange","_e$target","action","autoComplete","onSubmit","preventDefault","some","contact","toLowerCase","Notify","warning","concat","clickToClose","addContact","success","pattern","title","required","contactsList","isLoading","getLoadingValue","filterValue","useEffect","fetchContacts","includes","hasContacts","length","UserForm","Filter","Card","Confirm","show","deleteContact","NotFound"],"sourceRoot":""}